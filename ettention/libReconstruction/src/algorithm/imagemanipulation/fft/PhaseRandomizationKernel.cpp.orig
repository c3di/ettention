#include "stdafx.h"
<<<<<<< HEAD:libReconstruction/src/algorithm/imagemanipulation/fft/PhaseRandomizationKernel.cpp

#include "algorithm/imagemanipulation/fft/PhaseRandomizationKernel.h"
=======
#include "algorithm/imagemanipulation/PhaseRandomizationKernel.h"
>>>>>>> 1b9af82bc1ec638f0b3da909d43a72380d2d1e95:libReconstruction/src/algorithm/imagemanipulation/PhaseRandomizationKernel.cpp
#include "gpu/opencl/CLAbstractionLayer.h"
#include "setup/ParameterSet/AlgebraicParameterSet.h"
#include "gpu/MemoryStructure.h"
#include "model/image/Image.h"
#include "PhaseRandomization_bin2c.h"

namespace ettention {

    PhaseRandomizationKernel::PhaseRandomizationKernel(CLAbstractionLayer* abstractionLayer, GPUMapped<Image>* imageMagnitude, GPUMapped<Image>* imageRandom)
        : ComputeKernel(abstractionLayer, PhaseRandomization_kernel_SourceCode, "computePhaseRandomizedImage"), imageMagnitude(imageMagnitude), imageRandom(imageRandom)
    {
        allocateOutputBuffer();
    }

    PhaseRandomizationKernel::~PhaseRandomizationKernel()
    {
        returnOutputBuffer();
    }

    void PhaseRandomizationKernel::SendVariablesToKernel()
    {
        adaptWorkItemSize();
        Implementation()->setKernelParameter("resolution", imageMagnitude->getResolution());
        Implementation()->setKernelParameter("imageRandom", imageRandom);
        Implementation()->setKernelParameter("imageMagnitude", imageMagnitude);
        Implementation()->setKernelParameter("imagePhaseShifted_real", imagePhaseShifted_real);
        Implementation()->setKernelParameter("imagePhaseShifted_imaginary", imagePhaseShifted_imaginary);
    }

    void PhaseRandomizationKernel::PostProcessKernelRun()
    {
        this->imagePhaseShifted_real->markAsChangedOnGPU();
        this->imagePhaseShifted_imaginary->markAsChangedOnGPU();
    }

    void PhaseRandomizationKernel::SendConstantsToKernel()
    {
    }

    Image* PhaseRandomizationKernel::getRealOutputAsImage()
    {
        this->imagePhaseShifted_real->ensureIsUpToDateOnCPU();
        return this->imagePhaseShifted_real->getObjectOnCPU();
    }

    Image* PhaseRandomizationKernel::getImaginaryOutputAsImage()
    {
        this->imagePhaseShifted_imaginary->ensureIsUpToDateOnCPU();
        return this->imagePhaseShifted_imaginary->getObjectOnCPU();
    }

    GPUMapped<Image>* PhaseRandomizationKernel::getRealOutput()
    {
        return imagePhaseShifted_real;
    }

    GPUMapped<Image>* PhaseRandomizationKernel::getImaginaryOutput()
    {
        return imagePhaseShifted_imaginary;
    }

    void PhaseRandomizationKernel::adaptWorkItemSize()
    {
        setTotalNumberOfWorkItems(imageMagnitude->getResolution());
    }

    void PhaseRandomizationKernel::allocateOutputBuffer()
    {
        imagePhaseShifted_real = new GPUMapped<Image>(this->abstractionLayer, imageMagnitude->getResolution().xy());
        imagePhaseShifted_imaginary = new GPUMapped<Image>(this->abstractionLayer, imageMagnitude->getResolution().xy());
    }

    void PhaseRandomizationKernel::returnOutputBuffer()
    {
        delete imagePhaseShifted_real;
        delete imagePhaseShifted_imaginary;
    }
}