#ifndef MATRIX_4X4_CL
#define MATRIX_4X4_CL

typedef struct
{
    float4 column0;
    float4 column1;
    float4 column2;
    float4 column3;
} Matrix4x4;

void matrix4x4_create_from_vectors(Matrix4x4* m, float4 column0, float4 column1, float4 column2, float4 column3)
{
    m->column0 = column0;
    m->column1 = column1;
    m->column2 = column2;
    m->column3 = column3;
}

void matrix4x4_create_from_array(Matrix4x4* matrix, __constant float* m)
{
    matrix->column0 = (float4) (m[ 0], m[ 1], m[ 2], m[3]);
    matrix->column1 = (float4) (m[ 4], m[ 5], m[ 6], m[7]);
    matrix->column2 = (float4) (m[ 8], m[ 9], m[10], m[11]);
    matrix->column3 = (float4) (m[12], m[13], m[14], m[15]);
}

float4 multiply(Matrix4x4* m, float4 v)
{
    float4 result;
    result.x = m->column0.x * v.x + m->column1.x * v.y + m->column2.x * v.z + m->column3.x * v.w;
    result.y = m->column0.y * v.x + m->column1.y * v.y + m->column2.y * v.z + m->column3.y * v.w;
    result.z = m->column0.z * v.x + m->column1.z * v.y + m->column2.z * v.z + m->column3.z * v.w;
    result.w = m->column0.w * v.x + m->column1.w * v.y + m->column2.w * v.z + m->column3.w * v.w;
    return result;
}

float4 MultiplyG(__constant Matrix4x4* m, float4 v)
{
    float4 result;
    result.x = m->column0.x * v.x + m->column1.x * v.y + m->column2.x * v.z + m->column3.x * v.w;
    result.y = m->column0.y * v.x + m->column1.y * v.y + m->column2.y * v.z + m->column3.y * v.w;
    result.z = m->column0.z * v.x + m->column1.z * v.y + m->column2.z * v.z + m->column3.z * v.w;
    result.w = m->column0.w * v.x + m->column1.w * v.y + m->column2.w * v.z + m->column3.w * v.w;
    return result;
}

float3 TransformCoord(Matrix4x4* m, float3 v)
{
    float4 result = multiply(m, (float4)(v, 1.0f));
    return result.xyz / result.w;
}

float3 TransformCoordG(__constant Matrix4x4* m, float3 v)
{
    float4 result = MultiplyG(m, (float4)(v, 1.0f));
    return result.xyz / result.w;
}

float3 TransformNormal(Matrix4x4* m, float3 v)
{
    return multiply(m, (float4)(v, 0.0f)).xyz;
}

float3 TransformNormalG(__constant Matrix4x4* m, float3 v)
{
    return MultiplyG(m, (float4)(v, 0.0f)).xyz;
}

#endif