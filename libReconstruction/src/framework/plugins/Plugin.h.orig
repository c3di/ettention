#pragma once

#include "framework/Framework.h"
#include "setup/ParameterSet/AlgebraicParameterSet.h"
#include "gpu/opencl/CLAbstractionLayer.h"
#include "io/ImageStackDataSourceFactory.h"

#include "algorithm/reconstruction/ReconstructionAlgorithm.h"
#include "algorithm/ParticleDetectionAlgorithm.h"
#include "algorithm/projections/forward/ForwardProjectionOperator.h"

namespace ettention
{
    class Plugin
    {
    public:
        Plugin( );
        virtual ~Plugin();;

        virtual std::string getName() = 0;

        Framework* getFramework();
        void setFramework(Framework* val);

<<<<<<< HEAD
        virtual ReconstructionAlgorithm* instantiateReconstructionAlgorithm( std::string identifier, CLAbstractionLayer* al, ParameterSource* );
        virtual ParticleDetectionAlgorithm* instantiateParticleDetectionAlgorithm( std::string identifier, CLAbstractionLayer* al, ParameterSource* );
        virtual ForwardProjectionOperator* instantiateForwardProjectionOperator(ImageStackDatasource* source, const AlgebraicParameterSet* paramSet, CLAbstractionLayer* abstractionLayer);
        virtual ProjectionSet* instantiateProjectionIterator(std::string identifier, ImageStackDatasource* source);
=======
        virtual ReconstructionAlgorithm* instantiateReconstructionAlgorithm( std::string identifier, CLAbstractionLayer* al, ParameterSource* );		
		virtual ParticleDetectionAlgorithm* instantiateParticleDetectionAlgorithm( std::string identifier, CLAbstractionLayer* al, ParameterSource* );
>>>>>>> e3fd2c6f1c702bf0b2b268110b8f88e819c25fc5

        virtual ProjectionSet* instantiateProjectionIterator(std::string identifier, ImageStackDatasource* source);
        virtual std::vector<ParameterSource*> instantiateParameterSource();

        virtual void registerImageStackDataSourcePrototype( ImageStackDatasourceFactory* factory );

        virtual void registerForwardProjectionCreator( ForwardProjectionFactory* factory );
        virtual void registerBackProjectionCreator(BackProjectionFactory* factory);

    protected:
        Framework* framework;

    };

} // namespace
