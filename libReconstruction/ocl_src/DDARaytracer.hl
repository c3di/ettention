#ifndef DDARAYTRACER_HL
#define DDARAYTRACER_HL

#include "VolumeGeometry.hl"
#include "RayUtils.hl"

#ifndef INIT_RAY
#error Including DDARaytracer without providing INIT_RAY
#endif
#ifndef ADDITIONAL_DDA_PARAMS
#error Including DDARaytracer without providing ADDITIONAL_DDA_PARAMS
#endif
#ifndef FILTER_OPERATOR
#error Including DDARaytracer without providing FILTER_OPERATOR
#endif
#ifndef RETURN_RESULT
#error Including DDARaytracer without providing RETURN_RESULT
#endif

int4 getInitialVoxelIndex(float4 position, float4 bBoxMin, float4 invVoxelSize, uint3 volumeRes)
{
    const float4 positionInGridSpace = (position - bBoxMin) * invVoxelSize;
    int4 voxelIndex = convert_int4_rtz(positionInGridSpace);

    int4 upperIndexBound = (int4)(convert_int3(volumeRes), 0) - (int4)(1, 1, 1, 0);
    int4 lowerIndexBound = (int4)(0, 0, 0, 0);
    voxelIndex = max(voxelIndex, lowerIndexBound);
    voxelIndex = min(voxelIndex, upperIndexBound);

    return voxelIndex;
}

float4 getRemainingDifferenceToVoxelBorder(float4 position, float4 ray, float4 invRay, float4 invVoxelSize, float4 voxelSize, float4 stepDifference)
{
    float4 res = floor(position * invVoxelSize) * voxelSize;

    res.x = (ray.x > 0.f) ? (res.x + voxelSize.x - position.x) * invRay.x : (res.x - position.x) * invRay.x;
    res.y = (ray.y > 0.f) ? (res.y + voxelSize.y - position.y) * invRay.y : (res.y - position.y) * invRay.y;
    res.z = (ray.z > 0.f) ? (res.z + voxelSize.z - position.z) * invRay.z : (res.z - position.z) * invRay.z;

    res.x = (ray.x == 0.f) ? FLT_MAX : res.x;
    res.y = (ray.y == 0.f) ? FLT_MAX : res.y;
    res.z = (ray.z == 0.f) ? FLT_MAX : res.z;

    res.x = (res.x == 0.0f) ? stepDifference.x : res.x;
    res.y = (res.y == 0.0f) ? stepDifference.y : res.y;
    res.z = (res.z == 0.0f) ? stepDifference.z : res.z;

    return res;
}

float4 calculateRayEntryPoint(float4 source, float t_in, float4 rayDirection, float4 bBoxMin, float4 bBoxMax)
{
    float4 position = source + t_in * rayDirection;
    position = clamp(position, bBoxMin, bBoxMax);
    return position;
}

float2 ddaTraverseRay(float4 source,
                      float4 ray,
                      __constant VolumeGeometry* volumeGeometry,
                      ADDITIONAL_DDA_PARAMS)
{
    const float4 invRay = invertVectorSafely(ray);
    const float2 tLimits = getBoundingBoxEntryAndExitPointInRayCoordinates(volumeGeometry->bBoxMin, volumeGeometry->bBoxMax, source, invRay);

    const float4 invVoxelSize = (float4)(1.0f, 1.0f, 1.0f, 1.0f) / volumeGeometry->voxelSize;

    INIT_RAY;
    float distanceInsideBoundingBox = 0.0f;

    if(!doesRayIntersectBoundingBox(tLimits.x, tLimits.y))
        RETURN_RESULT;

    distanceInsideBoundingBox = tLimits.y - tLimits.x;
    float totalT = tLimits.x;

    const float4 position = calculateRayEntryPoint(source, tLimits.x, ray, volumeGeometry->bBoxMin, volumeGeometry->bBoxMax);

    int4 voxel = getInitialVoxelIndex(position, volumeGeometry->bBoxMin, invVoxelSize, volumeGeometry->subVolumeResolution);

    const float4 raySignf = sign(ray);
    float4 stepDifference = volumeGeometry->voxelSize * invRay * raySignf;
    const int4 raySignI = convert_int4_rtz(raySignf);

    float4 res = getRemainingDifferenceToVoxelBorder(position, ray, invRay, invVoxelSize, volumeGeometry->voxelSize, stepDifference);

    // trace ray
    uint breakVar = 0;
    const uint maxLoopExecs = 4096;
    while(all(voxel.xyz >= 0) && all(voxel.xyz < convert_int3(volumeGeometry->subVolumeResolution))/* && ++breakVar < maxLoopExecs*/)
    {
        const float deltaT = fmin(fmin(res.x, res.y), res.z);
        float4 volumeCoordinate = convert_float4(voxel) + (float4)(0.5f, 0.5f, 0.5f, 0.0f);

        FILTER_OPERATOR;

        int4 voxelIncr = (int4)(res.x <= res.y && res.x <= res.z ? 1 : 0,
                                res.y <  res.x && res.y <= res.z ? 1 : 0,
                                res.z <  res.x && res.z <  res.y ? 1 : 0,
                                0);

        const float4 step = convert_float4(voxelIncr);
        const float4 oneMinusStep = (float4)(1.0f, 1.0f, 1.0f, 1.0f) - step;

        const float4 nonStepComponent = oneMinusStep * (res - (float4)(deltaT, deltaT, deltaT, deltaT));
        const float4 stepComponent = step * stepDifference;
        res = stepComponent + nonStepComponent;
        voxel += voxelIncr * raySignI;
    }
    RETURN_RESULT;
}

#endif