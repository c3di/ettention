<?xml version="1.0"?>
<parameter>
	
	<volume caption="Volume parameters">
		<resolution caption="Resolution" type="uint3" required="false">
			<helptext>Specifies the resolution of the reconstruction volume. This always corresponds to the resolution of the output volume. The voxel size is given implicitly by dividing volume.dimensions by volume.resolution. If the parameter is left unspecified, the system assumes a voxel size of 1/1/1 and computes the resolution from volume.dimensions.</helptext>
		</resolution>
		<initValue caption="Initialization value" type="float" required="false" default="0.0">
			<helptext>This parameter specifies an initial, constant value for the reconstruction volume. The parameter is exclusive with volume.initFile, i.e. one can either specify an initValue or an initFile, not both.</helptext>
		</initValue>
		<initFile caption="Initialization file" type="path" required="false">
			<helptext>This parameter specifies an volume file to load as an initialization of the reconstruction process. The parameter is exclusive with volume.initValue, i.e. one can either specify an initValue or an initFile, not both.</helptext>
		</initFile>
	</volume>

	<priorKnowledge caption="Prior knowledge parameters">
		<volumeMinimumIntensity caption="Minimum intensity in volume" type="float" required="false">
			<helptext>This parameter specifies minimum value the reconstructed tomogram should have, i.e. if the value is zero then the tomogram gray values must be positive.</helptext>
		</volumeMinimumIntensity>
		<volumeMaximumIntensity caption="Maximum intensity in volume" type="float" required="false">
			<helptext>This parameter specifies maximum value the reconstructed tomogram should have, i.e. if the value is zero then the tomogram gray values must be negative.</helptext>
		</volumeMaximumIntensity>
	</priorKnowledge>
	
	<output caption="Output parameters">
		<format caption="Format" type="enum(mrc,rek,#custom)" required="false">
			<helptext>This parameter specifies in which file format the output volume is written. Legal ids are “mrc” (MRC stack) and “rek” (Fraunhofer REK format). It the parameter is not specified, the system uses the extension of the filename in the output. Additional file formats can be provided via plugins.</helptext>
		</format>
		<voxelType caption="Voxel type" type="enum(unsigned8,unsigned16,float32)" required="false">
				<helptext>This parameter specifies the encoding of an individual voxel in the output stack. For the floating point voxel type float32, values are stored “as they are”. For the fixed precision voxel types (unsigned8 and unsigned16), values are scaled to exploit the available data range as best as possible, i.e. the lowest value is mapped to zero and the highest value in the volume to the highest available integer value in the encoding. If the parameter is not specified, the value is set according to the MODE parameter in tilt.com.</helptext>
		</voxelType>
		<orientation caption="Orientation" type="enum(xzy_order,xyz_order)" required="false">
				<helptext>This parameter specifies, in which orientation the output volume is written to disc, i.e. what coordinate layout order is used. The possible values are xzy_order and xyz_order. Default is the xzy layout which corresponds to the output orientation of other reconstruction techniques provided by etomo (WBP, SIRT).</helptext>
		</orientation>
		<invert caption="Invert" type="boolean" required="false" default="false">
				<helptext>If set to true, the output volume will be inverted in the sense, that the absolute range of the values are preserved by the role high- and low contrast are exchanged, i.e. bright voxels become dark and vice versa.</helptext>
		</invert>
	</output>
	
	<hardware caption="Hardware parameters">
		<subVolumeCount caption="Number of subvolumes" type="uint" required="false">
			<helptext>By default, the system automatically determines how much memory is available on the OpenCL device. If the available memory is insufficient to store the entire volume (plus all additional buffers), a number of subvolumes is used, i.e. the system incrementally transfers parts of the volume for processing. By setting the parameter, the automatic choice for the number of subvolumes can be set manually. However, setting a number lower than the system suggestion is likely to result in an out-of-memory error.</helptext>
		</subVolumeCount>
		<openclVendor caption="OpneCL vendor" type="enum(any,amd,intel,nvidia)" required="false" default="any">
			<helptext>This value specifies, which OpenCL devices should be used for the reconstruction. The default value is “any”, other legal values are “intel”, “nvidia” and “amd”. By setting a value, access to opencl devices can be restricted to devices from a certain vendor.</helptext>
		</openclVendor>
		<openclDeviceType caption="OpenCL device type" type="enum(gpu_cpu,cpu_gpu,gpu,cpu)" required="false">
			<helptext>This value specifies, which OpenCL devices should be used for the reconstruction. The default value is “gpu_cpu”, other legal values are “cpu_gpu”, “gpu” and “cpu”. The different options have to following effect:
	gpu_cpu If available, the system uses a GPU. If no GPU is available, the system uses a CPU device.
	cpu_gpu If available, the system uses a CPU. If no CPU is available (i.e. no OpenCL driver is installed for the CPU), the system uses a GPU device.
	gpu The system uses a GPU device. If no GPU device is available, an error message is produced.
	cpu The system uses a CPU device. If no CPU device is available, an error message is produced.
			</helptext>
		</openclDeviceType>
		<openclDeviceId caption="OpenCL device ID" type="int" required="false">
			<helptext>If this parameter is set, the id if an opencl device can be specified explicitly. The parameter should not be used together with openclVendor and openclDeviceType. In other words: you can either give hints using specifiy openclVendor and openclDeviceType and let the system decide which device to use, or explicitly specify the device using openclDeviceId, not both.</helptext>
		</openclDeviceId>
		<disableImageSupport caption="Disable image support" type="boolean" required="false" default="false">
			<helptext>By default, the system detects if an OpenCL device has support for 3D textures (images) and uses this type of memory for the forward projections. On platforms without support for 3D textures, the behavior is emulated. By setting the parameter to true, the system will use the emulation on any platform, disregarding native texture support.</helptext>
		</disableImageSupport>
	</hardware>

	<debug caption="Debug parameters">
		<profilingLevel caption="Profiling level" type="enum(none,overall,normal,detail)" required="false" default="overall">
			<helptext>This parameter controls the granularity at which OpenCL kernel profiling information is recorded. Kernel profiling works only in debug mode.</helptext>
		</profilingLevel>
		<performanceReportFile caption="Profiling level" type="path" required="false" default="performace.csv">
			<helptext>This parameter controls, where the OpenCL profiling information will be written.</helptext>
		</performanceReportFile>
		<infoPath caption="Path" type="path" required="false" default="debug">
			<helptext>This parameter specifies in which directory debug images and volumes will be written. The path is used for the output generated by setting one of the following paramters: writeProjections, writeProjectionsInFourierSpace, writeResiduals, etc...</helptext>
		</infoPath>
		<outputKernelParameters caption="Print kernel parameters" type="boolean" required="false" default="false">
			<helptext>If set to true, the parameters that are passed to a OpenCL compute kernel are printed to the log prior to every kernel call.</helptext>
		</outputKernelParameters>
		<displayProjectionRMS caption="Print projection RMS" type="boolean" required="false" default="true">
			<helptext>If set to true, the root-mean-square error of every residual image will be calculated and written to the log.</helptext>
		</displayProjectionRMS>
		<writeProjections caption="Write projections" type="boolean" required="false" default="false">
			<helptext>If set to true, the measured projections will be written to disc prior to processing. After reading a projection, it will be written again in TIFF format (32 bit float) in a directory #current_path/Debug. Files will be named indicating the iteration number and projection number.</helptext>
		</writeProjections>
		<writeProjectionsInFourierSpace caption="Write projection in fourier space" type="boolean" required="false" default="false">
			<helptext>If set to true, the measured projections will additionally be transferred to Fourier space written to disc. The output involved two files, on for the real part of the Fourier transform and one for the imaginary part.</helptext>
		</writeProjectionsInFourierSpace>
		<writeVirtualProjections caption="Write virtual projections" type="boolean" required="false" default="false">
			<helptext>If set to true, the virtual projections will be written to disc immediately after the forward projection.</helptext>
		</writeVirtualProjections>
		<writeVirtualProjectionsInFourierSpace caption="Write virtual projections in fourier space" type="boolean" required="false" default="false">
			<helptext>If set to true, the virtual  projections will additionally be transferred to Fourier space written to disc.</helptext>
		</writeVirtualProjectionsInFourierSpace>
		<writeResiduals  caption="Write residual images" type="boolean" required="false" default="false">
			<helptext>If set to true, the residual images will be written to disc immediately after computation.</helptext>
		</writeResiduals >
		<writeRayLength caption="Write ray length images" type="boolean" required="false" default="false">
			<helptext>If set to true, the an image showing the ray length for every pixel will be written immediately after each forward projection.</helptext>
		</writeRayLength>
		<writeIntermediateVolumes caption="Write intermediate volumes" type="boolean" required="false" default="false">
			<helptext>If set to true, after the processing of each back projection, an intermediate volume will be written to disc. The file format is MRC stack at 32 bit floating point precision.</helptext>
		</writeIntermediateVolumes>
		<writeIntermediateVolumesAfterIterations caption="Write intermediate volumes after each iteration" type="boolean" required="false" default="false">
			<helptext>If set to true, after each iteration (i.e. after executing the back projection once for every projection), an intermediate volume will be written to disc. The file format is MRC stack at 32 bit floating point precision.</helptext>
		</writeIntermediateVolumesAfterIterations>
	</debug>

</parameter>